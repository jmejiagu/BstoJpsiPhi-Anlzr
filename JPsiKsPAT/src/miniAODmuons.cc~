// -*- C++ -*-
//
// Package:    JPsiBplus
// Class:      JPsiBplus
// 

//=================================================
// original author:  Jhovanny Andres Mejia        |
//         created:  Fryday Sep 23                |
//         <jhovanny.andres.mejia.guisao@cern.ch> | 
//=================================================

// system include files
#include <memory>


// user include files
#include "myAnalyzers/JPsiKsPAT/src/miniAODmuons.h"

#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/ServiceRegistry/interface/Service.h"

#include "DataFormats/PatCandidates/interface/CompositeCandidate.h"
#include "DataFormats/PatCandidates/interface/PackedGenParticle.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/HepMCCandidate/interface/GenParticleFwd.h"
//#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/BeamSpot/interface/BeamSpot.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/Common/interface/TriggerResults.h"

//For kinematic fit:
#include "TrackingTools/TransientTrack/interface/TransientTrackBuilder.h"
#include "TrackingTools/Records/interface/TransientTrackRecord.h"
#include "TrackingTools/TransientTrack/interface/TransientTrack.h"
#include "MagneticField/Engine/interface/MagneticField.h"            
#include "CommonTools/Statistics/interface/ChiSquaredProbability.h"

#include "RecoVertex/KinematicFit/interface/KinematicParticleVertexFitter.h"
#include "RecoVertex/KinematicFitPrimitives/interface/KinematicParticleFactoryFromTransientTrack.h"
#include "RecoVertex/KinematicFit/interface/MassKinematicConstraint.h"
#include "RecoVertex/KinematicFit/interface/KinematicParticleFitter.h"
#include "RecoVertex/KinematicFitPrimitives/interface/MultiTrackKinematicConstraint.h"
#include "RecoVertex/KinematicFit/interface/KinematicConstrainedVertexFitter.h"
#include "RecoVertex/KinematicFit/interface/TwoTrackMassKinematicConstraint.h"
#include "RecoVertex/KinematicFitPrimitives/interface/KinematicParticle.h"
#include "RecoVertex/KinematicFitPrimitives/interface/RefCountedKinematicParticle.h"
#include "RecoVertex/KinematicFitPrimitives/interface/TransientTrackKinematicParticle.h"


#include "FWCore/Common/interface/TriggerNames.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "TLorentzVector.h"
#include "TTree.h"
#include "TH2F.h"

//
// constants, enums and typedefs
//

  typedef math::Error<3>::type CovarianceMatrix;

//
// static data member definitions
//

//
// constructors and destructor
//

miniAODmuons::miniAODmuons(const edm::ParameterSet& iConfig)
  :
  dimuon_Label(consumes<edm::View<pat::Muon>>(iConfig.getParameter<edm::InputTag>("dimuons"))),
  //trakCollection_label(consumes<std::vector<pat::GenericParticle>>(iConfig.getParameter<edm::InputTag>("Trak"))),
  trakCollection_label(consumes<edm::View<pat::PackedCandidate>>(iConfig.getParameter<edm::InputTag>("Trak"))),
  //trakCollection_label(consumes<pat::PackedCandidateCollection>(iConfig.getParameter<edm::InputTag>("Trak"))),
  //trakCollection_label_lowpt(consumes<edm::View<pat::PackedCandidate>>(iConfig.getParameter<edm::InputTag>("Trak_lowpt"))),
  primaryVertices_Label(consumes<reco::VertexCollection>(iConfig.getParameter<edm::InputTag>("primaryVertices"))),
  triggerResults_Label(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("TriggerResults"))),
  BSLabel_(consumes<reco::BeamSpot>(iConfig.getParameter<edm::InputTag>("bslabel"))),

  
  OnlyBest_(iConfig.getParameter<bool>("OnlyBest")),
  isMC_(iConfig.getParameter<bool>("isMC")),
  OnlyGen_(iConfig.getParameter<bool>("OnlyGen")),
  //upsilon_mass_(iConfig.getParameter<double>("upsilon_mass")),
  //triggerCuts_(iConfig.getParameter<uint32_t>("triggerCuts"))
 

  tree_(0), 

  
  priRfVtxX(0), priRfVtxY(0), priRfVtxZ(0), priRfVtxXE(0), priRfVtxYE(0), priRfVtxZE(0), priRfVtxCL(0),
  priRfVtxXYE(0), priRfVtxXZE(0), priRfVtxYZE(0),
  priRfNTrkDif(0), 

  mumC2(0), mumNHits(0), mumNPHits(0),
  mupC2(0), mupNHits(0), mupNPHits(0),
  mumdxy(0), mupdxy(0), mumdz(0), mupdz(0),
  muon_dca(0),

  tri_Dim16(0), tri_Dim20(0), tri_JpsiTk(0), tri_DoubleMu43Jpsi(0),

  mu1soft(0), mu2soft(0), mu1tight(0), mu2tight(0), 
  mu1PF(0), mu2PF(0), mu1loose(0), mu2loose(0),
 
  
  // *******************************************************
 
  nB(0), nMu(0),
  B_mass(0), B_px(0), B_py(0), B_pz(0), B_charge(0),
  B_k_px(0), B_k_py(0), B_k_pz(0), B_k_charge1(0),
  B_k_px_track(0), B_k_py_track(0), B_k_pz_track(0),
  B_k_parentId1(0), B_k_pId1(0),
  B_J_mass(0), B_J_px(0), B_J_py(0), B_J_pz(0),

  B_J_pt1(0), B_J_px1(0), B_J_py1(0), B_J_pz1(0),
  B_J_pt2(0), B_J_px2(0), B_J_py2(0), B_J_pz2(0), 
  B_J_charge1(0), B_J_charge2(0),
  
  nVtx(0),
  priVtxX(0), priVtxY(0), priVtxZ(0), priVtxXE(0), priVtxYE(0), priVtxZE(0), priVtxCL(0),
  priVtxXYE(0), priVtxXZE(0), priVtxYZE(0),

  
  // vertice primario CON mejor pointin-angle
  pVtxIPX(0),   pVtxIPY(0),   pVtxIPZ(0), pVtxIPXE(0),   pVtxIPYE(0),   pVtxIPZE(0), pVtxIPCL(0),
  pVtxIPXYE(0),   pVtxIPXZE(0),   pVtxIPYZE(0),

  


  // ************ esta es la informacion concerniente al beamspot *************
  PVXBS(0), PVYBS(0), PVZBS(0), PVXBSE(0), PVYBSE(0), PVZBSE(0),
  PVXYBSE(0), PVXZBSE(0), PVYZBSE(0),
 
  // ************************ ****************************************************


  B_chi2(0), B_J_chi2(0),
  B_Prob(0), B_J_Prob(0), 
 
  B_DecayVtxX(0),     B_DecayVtxY(0),     B_DecayVtxZ(0),
  B_DecayVtxXE(0),    B_DecayVtxYE(0),    B_DecayVtxZE(0),
  B_DecayVtxXYE(0),   B_DecayVtxXZE(0),   B_DecayVtxYZE(0),

  B_J_DecayVtxX(0),   B_J_DecayVtxY(0),   B_J_DecayVtxZ(0),
  B_J_DecayVtxXE(0),  B_J_DecayVtxYE(0),  B_J_DecayVtxZE(0),
  B_J_DecayVtxXYE(0), B_J_DecayVtxXZE(0), B_J_DecayVtxYZE(0),
  //nMuonPTrgL(1), nMuonMTrgL(1),
 
  //trigger(0)
  run(0), event(0),
  lumiblock(0)


{
   //now do what ever initialization is needed
}


miniAODmuons::~miniAODmuons()
{

}


//
// member functions
//

void miniAODmuons::CheckHLTTriggers(const std::vector<std::string>& TrigList){

    using namespace std;
    using namespace edm;
    using namespace reco;
    using namespace helper;
    
    
    string AllTrg="";
    string tmptrig;

    int ntrigs=TrigList.size();
    if (ntrigs==0)
        std::cout << "No trigger name given in TriggerResults of the input " << endl;
    
    for (int itrig=0; itrig< ntrigs; itrig++) {
        //TString trigName = triggerNames_.triggerName(itrig);
        string trigName = TrigList.at(itrig);
    
	     tmptrig = (string) trigName; tmptrig +=" ";
	     AllTrg += tmptrig;
    }

   int m = sprintf(triggersL,"%s","");
   m = sprintf(triggersL,"%s",AllTrg.c_str());
   //cout<<" INFO: Triggers :  "<<m<<"  "<<n<<"  "<<triggersL<<endl;

   //nTrgL = AllTrg.size();
   nTrgL = m;
   //cout<<" INFO: Triggers :  "<<m<<"  "<<nTrgL<<"  "<<triggersL<<endl; 

   return;
}



/*
int miniAODmuons::PdgIDatTruthLevel(reco::TrackRef Track, edm::Handle<reco::GenParticleCollection> genParticles, int &ParentID)
{
  double pXTrack = Track->momentum().x();
  double pYTrack = Track->momentum().y();
  double pZTrack = Track->momentum().z();

  //std::cout<<" *** "<<pXTrack<<" -- "<<pYTrack<<" --  "<<pZTrack<<std::endl;

  std::vector<double> chi2v;
  std::vector<int> idPDG;
  std::vector<int> idPDGP;

  for( size_t k = 0; k < genParticles->size(); k++ ) 
    {

      reco::GenParticle PCand =  (*genParticles)[k];
      double truePx = PCand.px();
      double truePy = PCand.py();
      double truePz = PCand.pz();
      //if(PCand.pdgId()==fabs(211)) std::cout<<truePx<<"  "<<truePy<<"  "<<truePz<<std::endl;
      
      double dpx = pXTrack - truePx;
      double dpy = pYTrack - truePy;
      double dpz = pZTrack - truePz;
      double chi2 = dpx*dpx + dpy*dpy + dpz*dpz;
      //if(chi2<1.) std::cout<<chi2<<"  id: "<<PCand.pdgId()<<std::endl;
      //if(chi2<1.) std::cout<<truePx<<"  "<<truePy<<"  "<<truePz<<" id: "<<PCand.pdgId()<<std::endl;

       if(chi2>10.0)continue;

      if(PCand.numberOfMothers()!=1) continue;
      const reco::Candidate * PCandM = PCand.mother();
      //std::cout<<PCandM->pdgId()<<std::endl;

      //B_k_chi2->push_back(chi2);
      chi2v.push_back(chi2);
      idPDG.push_back(PCand.pdgId());
      idPDGP.push_back(PCandM->pdgId());

    }

  double chi2min_temp=100000;
  //double chi2min=-1;
  int idtemp = -1;
  int idptemp = -1;
  for(int i=0;i<(int)chi2v.size();i++)
    {
      if(chi2min_temp>chi2v.at(i))
	{
	  chi2min_temp = chi2v.at(i);
	  idtemp = idPDG.at(i);
	  idptemp = idPDGP.at(i);
	}
    }
 
  //std::cout<<chi2min_temp<<"  id: "<<idtemp<<std::endl;
  ParentID = idptemp;
  return idtemp;
}
*/




// ------------ method called to for each event  ------------
void miniAODmuons::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  using std::vector;
  using namespace edm;
  using namespace reco;
  using namespace std;
  
  //*********************************
  // Get event content information
  //*********************************  

  //ESHandle<MagneticField> bFieldHandle;
  //iSetup.get<IdealMagneticFieldRecord>().get(bFieldHandle);

  // Kinematic fit
  edm::ESHandle<TransientTrackBuilder> theB; 
  iSetup.get<TransientTrackRecord>().get("TransientTrackBuilder",theB); 

  edm::Handle< View<pat::PackedCandidate> > thePATTrackHandle;
  iEvent.getByToken(trakCollection_label,thePATTrackHandle);
  //edm::Handle< View<pat::PackedCandidate> > thePATTrackHandle_Ori;
  //iEvent.getByToken(trakCollection_label,thePATTrackHandle_Ori);

  //edm::Handle< View<pat::PackedCandidate> > thePATTrackHandle_lowpt;
  //iEvent.getByToken(trakCollection_label_lowpt,thePATTrackHandle_lowpt);

  edm::Handle< View<pat::Muon> > thePATMuonHandle;
  iEvent.getByToken(dimuon_Label,thePATMuonHandle);
  // iEvent.getByLabel(muonType, thePATMuonHandle);

  // ************* VERY IMPORTANT **********************************
  // add "lostTracks" to "packedPFCandidates"
  //
  /*std::vector<const pat::PackedCandidate *> thePATTrackHandle ;
  for (const pat::PackedCandidate &p1 : *thePATTrackHandle_Ori ) thePATTrackHandle.push_back(&p1);
  for (const pat::PackedCandidate &p2 : *thePATTrackHandle_lowpt ) thePATTrackHandle.push_back(&p2);*/
  //
  //
  // ******************** *******************************************
 

  //get genParticles  
  // Handle<GenParticleCollection> genParticles;
//   if (isMC_) 
//     {
  // iEvent.getByLabel(genParticles_, genParticles);
      //    }
    ////////////////////////////////////


// Get HLT results
 edm::Handle<edm::TriggerResults> triggerResults_handle;
 //iEvent.getByLabel(triggerResults_Label, triggerResults_handle);
 iEvent.getByToken(triggerResults_Label, triggerResults_handle);

 /*
  edm::Handle<edm::TriggerResults> triggerResults_handle;
  try {
    std::string const &trig = std::string("TriggerResults::")+triggerResults_Label;
    iEvent.getByLabel(edm::InputTag(trig),triggerResults_handle);
  }
  catch ( ... ) 
    {
      std::cout << "Couldn't get handle on HLT Trigger!" << endl;
    }
    
    //HLTConfigProvider hltConfig_;
    */

    std::vector<std::string> TrigTable; TrigTable.clear();
    // Get hold of trigger names - based on TriggerResults object
    const edm::TriggerNames& triggerNames1_ = iEvent.triggerNames(*triggerResults_handle);
    
    for (unsigned int itrig = 0; itrig < triggerResults_handle->size(); ++itrig){
        if ((*triggerResults_handle)[itrig].accept() == 1){
            std::string trigName1 = triggerNames1_.triggerName(itrig);
            //int trigPrescale = hltConfig_.prescaleValue(itrig, trigName1);
            TrigTable.push_back(trigName1);
        }
    }

    /*
    cout<< "Trigger table: ";
    for( unsigned int i = 0; i<TrigTable.size(); ++i)
        cout<<TrigTable.at(i) << " ";
    
    cout<< endl;
    */
    

    /*
    CheckHLTTriggers(TrigTable);
//aqui condicion para HLT   
   string alltnames = triggersL;
    //Bool_t checkflag = false;
   
   cout<<"*Trigger List "<< triggersL << endl;     

     string::size_type trigger1 = alltnames.find("HLT_DoubleMu4_3_Jpsi_Displaced",0);
     string::size_type trigger1 = alltnames.find("HLT_DoubleMu4_JpsiTrk_Displaced",0);
    //string::size_type trigger1 = alltnames.find("HLT_DoubleMu4_LowMassNonResonantTrk_Displaced",0);

    if(trigger1==string::npos)
      {
	//checkflag=true;return;
	return;
	} 
   */
    

 
  //*********************************
  //Now we get the primary vertex 
  //*********************************

  reco::Vertex bestVtx;
  //edm::Handle<std::vector<reco::Vertex> > primaryVertices_handle;
  edm::Handle<reco::VertexCollection> primaryVertices_handle;
  iEvent.getByToken(primaryVertices_Label, primaryVertices_handle);

  // get primary vertex
  bestVtx = *(primaryVertices_handle->begin());

  priVtxX = bestVtx.x();
  priVtxY = bestVtx.y();
  priVtxZ = bestVtx.z();
  //priVtxXE = bestVtx.xError();
  //priVtxYE = bestVtx.yError();
  //priVtxZE = bestVtx.zError();
  priVtxXE = bestVtx.covariance(0, 0);
  priVtxYE = bestVtx.covariance(1, 1);
  priVtxZE = bestVtx.covariance(2, 2);
  priVtxXYE = bestVtx.covariance(0, 1);
  priVtxXZE = bestVtx.covariance(0, 2);
  priVtxYZE = bestVtx.covariance(1, 2);

  priVtxCL = ChiSquaredProbability((double)(bestVtx.chi2()),(double)(bestVtx.ndof())); 
  nVtx = primaryVertices_handle->size(); 


    
  //*********************************
  //Now we get the Beam Spot  
  //*********************************
 
  reco::BeamSpot beamSpot;
  edm::Handle<reco::BeamSpot> beamSpotHandle;
  iEvent.getByToken(BSLabel_, beamSpotHandle);
  //iEvent.getByLabel(BSLabel_, beamSpotHandle);
  if ( beamSpotHandle.isValid() ) beamSpot = *beamSpotHandle; 
  else std::cout << "No beam spot available from EventSetup" << endl;


  PVXBS = beamSpot.x0();
  PVYBS = beamSpot.y0();
  PVZBS = beamSpot.z0();
  PVXBSE = beamSpot.covariance()(0, 0);
  PVYBSE = beamSpot.covariance()(1, 1);
  PVZBSE = beamSpot.covariance()(2, 2);
  PVXYBSE = beamSpot.covariance()(0,1);
  PVXZBSE = beamSpot.covariance()(0,2);
  PVYZBSE = beamSpot.covariance()(1,2);
 
  lumiblock = iEvent.id().luminosityBlock();
  run = iEvent.id().run();
  event = iEvent.id().event();
  //int run1   =  iEvent.id().run();
  //int event1 =  iEvent.id().event();


  //*****************************************
  //Let's begin by looking for J/psi+K^+



  unsigned int nMu_tmp = thePATMuonHandle->size();
  //nMu = nMu_tmp;

  //for( std::vector<pat::Muon>::const_iterator iMuon1 = thePATMuonHandle->begin(); iMuon1 != thePATMuonHandle->end(); ++iMuon1) 

 for(View<pat::Muon>::const_iterator iMuon1 = thePATMuonHandle->begin(); iMuon1 != thePATMuonHandle->end(); ++iMuon1) 
    {
      
      for(View<pat::Muon>::const_iterator iMuon2 = iMuon1+1; iMuon2 != thePATMuonHandle->end(); ++iMuon2) 
	{
	  if(iMuon1==iMuon2) continue;
	  
	  //opposite charge 
	  if( (iMuon1->charge())*(iMuon2->charge()) == 1) continue;

	  //const pat::Muon *patMuonP = 0;
	  //const pat::Muon *patMuonM = 0;
	  TrackRef glbTrackP;	  
	  TrackRef glbTrackM;	  
	  
	  if(iMuon1->charge() == 1){ glbTrackP = iMuon1->track();}
	  if(iMuon1->charge() == -1){ glbTrackM = iMuon1->track();}
	  
	  if(iMuon2->charge() == 1) { glbTrackP = iMuon2->track();}
	  if(iMuon2->charge() == -1){ glbTrackM = iMuon2->track();}
	  
	  if( glbTrackP.isNull() || glbTrackM.isNull() ) 
	    {
	      //std::cout << "continue due to no track ref" << endl;
	      continue;
	    }

	  if(iMuon1->track()->pt()<4.0) continue;
	  if(iMuon2->track()->pt()<4.0) continue;

	  if(!(glbTrackM->quality(reco::TrackBase::highPurity))) continue;
	  if(!(glbTrackP->quality(reco::TrackBase::highPurity))) continue;

	  //std::cout << "empecemos los loops1" << endl;
	 
	  
	  reco::TransientTrack muon1TT((*theB).build(glbTrackP));
	  reco::TransientTrack muon2TT((*theB).build(glbTrackM));

	  //TransientTrack muon1TT((*theB).build(glbTrackP));
	  //TransientTrack muon2TT((*theB).build(glbTrackM));

	 // *****  Trajectory states to calculate DCA for the 2 muons *********************
	  FreeTrajectoryState mu1State = muon1TT.impactPointTSCP().theState();
	  FreeTrajectoryState mu2State = muon2TT.impactPointTSCP().theState();

	  if( !muon1TT.impactPointTSCP().isValid() || !muon2TT.impactPointTSCP().isValid() ) continue;

	  //std::cout << "empecemos los loops1 " << endl;


	  // Measure distance between tracks at their closest approach
	  ClosestApproachInRPhi cApp;
	  cApp.calculate(mu1State, mu2State);
	  if( !cApp.status() ) continue;
	  float dca = fabs( cApp.distance() );	  
	  //if (dca < 0. || dca > 0.5) continue;
	  //cout<<" closest approach  "<<dca<<endl;


	  // test del service work 
	  /*mu1soft->push_back(iMuon1->isSoftMuon(bestVtxIP) );
	  mu2soft->push_back(iMuon2->isSoftMuon(bestVtxIP) );
	  mu1tight->push_back(iMuon1->isTightMuon(bestVtxIP) );
	  mu2tight->push_back(iMuon2->isTightMuon(bestVtxIP) );
	  mu1PF->push_back(iMuon1->isPFMuon());
	  mu2PF->push_back(iMuon2->isPFMuon());
	  mu1loose->push_back(muon::isLooseMuon(*iMuon1));
	  mu2loose->push_back(muon::isLooseMuon(*iMuon2));*/

	  //if (iMuon1->isTrackerMuon() || iMuon2->isTrackerMuon())muon::isGoodMuon(*recoMuonM,muon::TMLastStationAngTight)
	  //muon::isHighPtMuon(*muon1,thePrimaryVertex);
	  //if (muon::isHighPtMuon(*iMuon1,bestVtx) || muon::isHighPtMuon(*iMuon2,bestVtx))
	  if (muon::isGoodMuon(*iMuon1,muon::TMLastStationAngTight) || muon::isGoodMuon(*iMuon2,muon::TMLastStationAngTight))
	    {
	      cout<<" is tracker muon  "<<endl;
	    }
	  else
	    {
	      cout<<" it is no tracker muon  "<<endl;
	    }



	  // *****  end DCA for the 2 muons *********************

	  //Let's check the vertex and mass

	  
	  //The mass of a muon and the insignificant mass sigma 
	  //to avoid singularities in the covariance matrix.
	  ParticleMass muon_mass = 0.10565837; //pdg mass
	  ParticleMass psi_mass = 3.096916;
	  float muon_sigma = muon_mass*1.e-6;
	  //float psi_sigma = psi_mass*1.e-6;
	  
	  //Creating a KinematicParticleFactory
	  KinematicParticleFactoryFromTransientTrack pFactory;
	  
	  //initial chi2 and ndf before kinematic fits.
	  float chi = 0.;
	  float ndf = 0.;
	  vector<RefCountedKinematicParticle> muonParticles;
	  try {
	    muonParticles.push_back(pFactory.particle(muon1TT,muon_mass,chi,ndf,muon_sigma));
	    muonParticles.push_back(pFactory.particle(muon2TT,muon_mass,chi,ndf,muon_sigma));
	  }
	  catch(...) { 
	    std::cout<<" Exception caught ... continuing 1 "<<std::endl; 
	    continue;
	  }
	  
	  KinematicParticleVertexFitter fitter;   
	  
	  RefCountedKinematicTree psiVertexFitTree;
	  try {
	    psiVertexFitTree = fitter.fit(muonParticles); 
	  }
	  catch (...) { 
	    std::cout<<" Exception caught ... continuing 2 "<<std::endl; 
	    continue;
	  }
	  
	  if (!psiVertexFitTree->isValid()) 
	    {
	      //std::cout << "caught an exception in the psi vertex fit" << std::endl;
	      continue; 
	    }
	  
	  psiVertexFitTree->movePointerToTheTop();
	  
	  RefCountedKinematicParticle psi_vFit_noMC = psiVertexFitTree->currentParticle();
	  RefCountedKinematicVertex psi_vFit_vertex_noMC = psiVertexFitTree->currentDecayVertex();
	  
	  if( psi_vFit_vertex_noMC->chiSquared() < 0 )
	    {
	      //std::cout << "negative chisq from psi fit" << endl;
	      continue;
	    }
	  
	  //some loose cuts go here
	  
	  if(psi_vFit_vertex_noMC->chiSquared()>50.) continue;
	  if(psi_vFit_noMC->currentState().mass()<2.9 || psi_vFit_noMC->currentState().mass()>3.3) continue;
	  
	  //More quality cuts?

	
	  //Now that we have a J/psi candidate, we look for K^+ candidates
	  
	  int PId1=0; 
	  for(View<pat::PackedCandidate>::const_iterator iTrack1 = thePATTrackHandle->begin(); 
		   iTrack1 != thePATTrackHandle->end(); ++iTrack1 ) 
		   {
	  /*for (unsigned int i = 0, n = thePATTrackHandle.size(); i<n ; ++i )
	    {
	    const pat::PackedCandidate *iTrack1 =  (thePATTrackHandle)[i];*/

		   if(iTrack1->charge()==0) continue;
		   if(fabs(iTrack1->pdgId())!=211) continue;
		   if(iTrack1->pt()<1.3) continue;
		   //if(iTrack1->pt()<0.95) continue;
		   if(!(iTrack1->trackHighPurity())) continue;

		   int ngenT1 = 0;
		   
		   //if ( IsTheSame(*iTrack1,*pmu1) || IsTheSame(*iTrack1,*pmu2) ) continue;
		   if ( IsTheSame(*iTrack1,*iMuon1) || IsTheSame(*iTrack1,*iMuon2) ) continue;
		    
		   //pat::GenericParticle patTrack1 = *iTrack1;		  
		   //if(!(patTrack1.track()->quality(reco::TrackBase::highPurity))) continue;
		   //if(patTrack1.track()->pt()<0.5) continue;
		   //if( ( (iTrack1->pt())/(iTrack1->ptError()))< 2.0) continue;
		   //if( ( (patTrack1.track()->pt())/(patTrack1.track()->ptError()))< 2.0) continue;
		   //if(iTrack1->track()->chi2()>20.) continue;
		   
		   //std::cout<< " por aca ando 5:   " << endl;


		   //TransientTrack kaonTT(patTrack1.track(), &(*bFieldHandle) );
		   //reco::TransientTrack kaonTT((*theB).build(patTrack1.track()));
		   //TransientTrack kaonTT((*theB).build(patTrack1.track()));
		   reco::TransientTrack kaonTT((*theB).build(iTrack1->pseudoTrack()));

		   ParticleMass kaon_mass = 0.493677;
		   float kaon_sigma = kaon_mass*1.e-6;

		   float chi = 0.;
		   float ndf = 0.;

		   //Now that we have the J/psi and the k, let's combine them

		   //First we do a constrained mass fit for the J/psi
		   /*
		   KinematicParticleFitter csFitter;
		   KinematicConstraint * Jpsi_c = new MassKinematicConstraint(psi_mass,psi_sigma);
	       
		   // Let's add this mass constraint to the J/psi fit to then do a vertex constrained fit:  
 
		   psiVertexFitTree = csFitter.fit(Jpsi_c,psiVertexFitTree);
		   
		   if (!psiVertexFitTree->isValid()){
		     //std::cout << "caught an exception in the J/psi mass + vertex constraint fit" << std::endl;
		     continue; 
		   }
	       
		   psiVertexFitTree->movePointerToTheTop();
		   RefCountedKinematicParticle psi_vFit_withMC = psiVertexFitTree->currentParticle();

		   if( psi_vFit_withMC->chiSquared() < 0 || psi_vFit_withMC->chiSquared() > 26)
		     { 
		       //std::cout << "negative chisq from J/psi vertex+mass constrain fit" << endl;
		       continue;
		     }
		   */

		   // ***************************
		   // JpsiKaon invariant mass (before kinematic vertex fit)
		   // ***************************
		   TLorentzVector kaon14V, Jpsi4V; 
		   kaon14V.SetXYZM(iTrack1->px(),iTrack1->py(),iTrack1->pz(),kaon_mass);
		   
		   Jpsi4V.SetXYZM(psi_vFit_noMC->currentState().globalMomentum().x(),psi_vFit_noMC->currentState().globalMomentum().y(),psi_vFit_noMC->currentState().globalMomentum().z(),psi_vFit_noMC->currentState().mass());

		   if ( (kaon14V + Jpsi4V).M()<4.2 || (kaon14V + Jpsi4V).M()>6.8 ) continue;

		   
		   //Now we are ready to combine!
		   // JPsi mass constraint is applied in the final Bplus fit,

		   vector<RefCountedKinematicParticle> vFitMCParticles;
		   vFitMCParticles.push_back(pFactory.particle(muon1TT,muon_mass,chi,ndf,muon_sigma));
		   vFitMCParticles.push_back(pFactory.particle(muon2TT,muon_mass,chi,ndf,muon_sigma));
		   vFitMCParticles.push_back(pFactory.particle(kaonTT,kaon_mass ,chi,ndf,kaon_sigma));
		   
		   //std::cout<< " por aca ando 5:   " << endl;
		  

		   MultiTrackKinematicConstraint *  j_psi_c = new  TwoTrackMassKinematicConstraint(psi_mass);
		   KinematicConstrainedVertexFitter kcvFitter;
		   RefCountedKinematicTree vertexFitTree = kcvFitter.fit(vFitMCParticles, j_psi_c);
		   if (!vertexFitTree->isValid()) {
		     //std::cout << "caught an exception in the B vertex fit with MC" << std::endl;
		     continue;
		   }
		   vertexFitTree->movePointerToTheTop();

		 
		    RefCountedKinematicParticle bCandMC = vertexFitTree->currentParticle();
		    RefCountedKinematicVertex bDecayVertexMC = vertexFitTree->currentDecayVertex();
		    if (!bDecayVertexMC->vertexIsValid()){
		      // cout << "B MC fit vertex is not valid" << endl;
		      continue;
		    }
		    
		    //std::cout<< " por aca ando 5:   " << endl;

		    
		    if ( (bCandMC->currentState().mass() < 5.0) || (bCandMC->currentState().mass() > 6.0) ) {
		      // (debug) cout << "continue from bmass > 6.5 or < 4.5 = " << bCandMC->currentState().mass() << endl;
		      continue;
		    }
		    

		    
		    if ( bDecayVertexMC->chiSquared()<0 || bDecayVertexMC->chiSquared()>50) {
		      //if ( bDecayVertexMC->chiSquared()<0 ) cout << " continue from negative chi2 = " << bDecayVertexMC->chiSquared() << endl;
		      //if (debug) cout << " continue from bad chi2 = " << bDecayVertexMC->chiSquared() << endl;
		      continue;
		    }
		    
		    double B_Prob_tmp       = TMath::Prob(bDecayVertexMC->chiSquared(),(int)bDecayVertexMC->degreesOfFreedom());
		    if(B_Prob_tmp<0.1)
		      {
		      continue;
		      }
		    

		    //std::cout<< " por aca ando 6:   " << endl;

		    
		    // get children from final B fit

		    vertexFitTree->movePointerToTheFirstChild();
		    RefCountedKinematicParticle mu1CandMC = vertexFitTree->currentParticle();
		    
		    vertexFitTree->movePointerToTheNextChild();
		    RefCountedKinematicParticle mu2CandMC = vertexFitTree->currentParticle();
		   

		   vertexFitTree->movePointerToTheNextChild();
		   RefCountedKinematicParticle kCandMC = vertexFitTree->currentParticle();
		    
		   /*

		   vertexFitTree->movePointerToTheFirstChild();
		   RefCountedKinematicParticle psiCandMC = vertexFitTree->currentParticle();

 		   psiVertexFitTree->movePointerToTheFirstChild();
 		   RefCountedKinematicParticle mu1CandMC = psiVertexFitTree->currentParticle();

 		   psiVertexFitTree->movePointerToTheNextChild();
 		   RefCountedKinematicParticle mu2CandMC = psiVertexFitTree->currentParticle();*/

		   KinematicParameters psiMu1KP = mu1CandMC->currentState().kinematicParameters();
		   KinematicParameters psiMu2KP = mu2CandMC->currentState().kinematicParameters();
		   KinematicParameters psiMupKP;
		   KinematicParameters psiMumKP;
	       
		   if ( mu1CandMC->currentState().particleCharge() > 0 ) psiMupKP = psiMu1KP;
		   if ( mu1CandMC->currentState().particleCharge() < 0 ) psiMumKP = psiMu1KP;
		   if ( mu2CandMC->currentState().particleCharge() > 0 ) psiMupKP = psiMu2KP;
		   if ( mu2CandMC->currentState().particleCharge() < 0 ) psiMumKP = psiMu2KP;	 


// 		   f0VertexFitTree->movePointerToTheFirstChild();
// 		   RefCountedKinematicParticle T1CandMC = f0VertexFitTree->currentParticle();

// 		   f0VertexFitTree->movePointerToTheNextChild();
// 		   RefCountedKinematicParticle T2CandMC = f0VertexFitTree->currentParticle();


 		   GlobalVector Jp1vec(mu1CandMC->currentState().globalMomentum().x(),
				       mu1CandMC->currentState().globalMomentum().y(),
 				       mu1CandMC->currentState().globalMomentum().z());


 		   GlobalVector Jp2vec(mu2CandMC->currentState().globalMomentum().x(),
				       mu2CandMC->currentState().globalMomentum().y(),
 				       mu2CandMC->currentState().globalMomentum().z());

		   //KinematicParameters k1KP = kCandMC->currentState().kinematicParameters();


		   
		   KinematicParameters VCandKP = kCandMC->currentState().kinematicParameters();
		   
		   //std::cout << "filling new candidate" << endl;
	       
		   // ************ fill candidate variables now

		  
		   // ************
		   
		   // Only save the first time
		   if(nB==0){


		     CheckHLTTriggers(TrigTable);
		     // cout<<"*Trigger List "<< triggersL << endl;
		     // Save number of Muons

		    
		     nMu  = nMu_tmp;
		     // cout<< "*Number of Muons : " << nMu_tmp << endl;
		     
		   // Get number of run and event
		     //run   =  run1;
		     //event =  event1;
		     
		     // cout<< "* Run: "<< run << "  event: " << event << endl;

		   } // end nB==0

		  
     // ********************* todos los vertices primarios y escogemos el de mejor pointing angle **************** 
		  
		   reco::Vertex bestVtxIP;


		   Double_t pVtxIPX_temp = -10000.0;
		   Double_t pVtxIPY_temp = -10000.0;
		   Double_t pVtxIPZ_temp = -10000.0;
		   Double_t pVtxIPXE_temp = -10000.0;
		   Double_t pVtxIPYE_temp = -10000.0;
		   Double_t pVtxIPZE_temp = -10000.0;
		   Double_t pVtxIPXYE_temp = -10000.0;
		   Double_t pVtxIPXZE_temp = -10000.0;
		   Double_t pVtxIPYZE_temp = -10000.0;
		   Double_t pVtxIPCL_temp = -10000.0;	
		   Double_t lip1 = -1000000.0;
		     for(size_t i = 0; i < primaryVertices_handle->size(); ++i) {
		       const Vertex &vtx = (*primaryVertices_handle)[i];
		       
		       Double_t dx1 = (*bDecayVertexMC).position().x() - vtx.x(); 
		       Double_t dy1 = (*bDecayVertexMC).position().y() - vtx.y();
		       Double_t dz1 = (*bDecayVertexMC).position().z() - vtx.z();
		       float cosAlphaXYb1 = ( bCandMC->currentState().globalMomentum().x() * dx1 + bCandMC->currentState().globalMomentum().y()*dy1 + bCandMC->currentState().globalMomentum().z()*dz1  )/( sqrt(dx1*dx1+dy1*dy1+dz1*dz1)* bCandMC->currentState().globalMomentum().mag() );

		       if(cosAlphaXYb1>lip1)
			 {
			   lip1 = cosAlphaXYb1 ;
			   pVtxIPX_temp = vtx.x();
			   pVtxIPY_temp = vtx.y();
			   pVtxIPZ_temp = vtx.z();
			   pVtxIPXE_temp = vtx.covariance(0, 0);
			   pVtxIPYE_temp = vtx.covariance(1, 1);
			   pVtxIPZE_temp = vtx.covariance(2, 2);
			   pVtxIPXYE_temp = vtx.covariance(0, 1);
			   pVtxIPXZE_temp = vtx.covariance(0, 2);
			   pVtxIPYZE_temp = vtx.covariance(1, 2);
			   pVtxIPCL_temp = (TMath::Prob(vtx.chi2(),(int)vtx.ndof()) );

			   bestVtxIP = vtx;

			 
			 }
                 
		     }
		   pVtxIPX->push_back( pVtxIPX_temp);
		   pVtxIPY->push_back(  pVtxIPY_temp);	    
		   pVtxIPZ->push_back(  pVtxIPZ_temp);
		   pVtxIPXE->push_back( pVtxIPXE_temp);
		   pVtxIPYE->push_back( pVtxIPYE_temp);	    
		   pVtxIPZE->push_back( pVtxIPZE_temp);
		   pVtxIPXYE->push_back( pVtxIPXYE_temp);
		   pVtxIPXZE->push_back( pVtxIPXZE_temp);	    
		   pVtxIPYZE->push_back( pVtxIPYZE_temp);
		   pVtxIPCL->push_back(  pVtxIPCL_temp);

		   //cout << "PV bestVtxIP: " <<bestVtxIP.x()<< " "<<bestVtxIP.y()<<" "<<bestVtxIP.z()<< endl;
		   //cout << "como se guarda: " <<pVtxBSIPX_temp<< " "<<pVtxBSIPY_temp<<" "<<pVtxBSIPZ_temp<< endl;
		   

		   B_mass->push_back(bCandMC->currentState().mass());
		   B_px->push_back(bCandMC->currentState().globalMomentum().x());
		   B_py->push_back(bCandMC->currentState().globalMomentum().y());
		   B_pz->push_back(bCandMC->currentState().globalMomentum().z());
		   // B_k_charge1->push_back(kCandMC->currentState().particleCharge());
		   B_charge->push_back(bCandMC->currentState().particleCharge());
		  
		   /*
		   B_k_px->push_back( kCandMC->currentState().globalMomentum().x() );
		   B_k_py->push_back( kCandMC->currentState().globalMomentum().y() );
		   B_k_pz->push_back( kCandMC->currentState().globalMomentum().z() );
		   B_k_parentId1->push_back(PId1);
		   B_k_pId1->push_back(ngenT1);
		   B_k_charge1->push_back( k1KP.currentState().particleCharge());iTrack1->charge()
		   */

		   B_k_px->push_back(VCandKP.momentum().x() );
		   B_k_py->push_back(VCandKP.momentum().y() );
		   B_k_pz->push_back(VCandKP.momentum().z() );
		   B_k_px_track->push_back(iTrack1->px() );
		   B_k_py_track->push_back(iTrack1->py() );
		   B_k_pz_track->push_back(iTrack1->pz() );
		   B_k_parentId1->push_back(PId1);
		   B_k_pId1->push_back(ngenT1);
		   B_k_charge1->push_back(kCandMC->currentState().particleCharge());
		   //B_k_charge1->push_back(iTrack1->charge() );
		  
		   //B_k_chi2->push_back(ngenT1);

		   B_J_mass->push_back( psi_vFit_noMC->currentState().mass() );
		   B_J_px->push_back( psi_vFit_noMC->currentState().globalMomentum().x() );
		   B_J_py->push_back( psi_vFit_noMC->currentState().globalMomentum().y() );
		   B_J_pz->push_back( psi_vFit_noMC->currentState().globalMomentum().z() );

		   

		   B_J_pt1->push_back(Jp1vec.perp());
		   B_J_px1->push_back(psiMu1KP.momentum().x());
		   B_J_py1->push_back(psiMu1KP.momentum().y());
		   B_J_pz1->push_back(psiMu1KP.momentum().z());
		   B_J_charge1->push_back(mu1CandMC->currentState().particleCharge());

		   B_J_pt2->push_back(Jp2vec.perp());
		   B_J_px2->push_back(psiMu2KP.momentum().x());
		   B_J_py2->push_back(psiMu2KP.momentum().y());
		   B_J_pz2->push_back(psiMu2KP.momentum().z());
		   B_J_charge2->push_back(mu2CandMC->currentState().particleCharge());

		  
		   B_J_chi2->push_back(psi_vFit_vertex_noMC->chiSquared());
		   B_chi2->push_back(bDecayVertexMC->chiSquared());
             
		   //double B_Prob_tmp       = TMath::Prob(bDecayVertexMC->chiSquared(),(int)bDecayVertexMC->degreesOfFreedom());
		   double Omb_J_Prob_tmp   = TMath::Prob(psi_vFit_vertex_noMC->chiSquared(),(int)psi_vFit_vertex_noMC->degreesOfFreedom());
		   B_Prob    ->push_back(B_Prob_tmp);
		   B_J_Prob  ->push_back(Omb_J_Prob_tmp);


		   B_DecayVtxX ->push_back((*bDecayVertexMC).position().x());    
		   B_DecayVtxY ->push_back((*bDecayVertexMC).position().y());
		   B_DecayVtxZ ->push_back((*bDecayVertexMC).position().z());

		   B_DecayVtxXE ->push_back(bDecayVertexMC->error().cxx());   
		   B_DecayVtxYE ->push_back(bDecayVertexMC->error().cyy());   
		   B_DecayVtxZE ->push_back(bDecayVertexMC->error().czz());
		   B_DecayVtxXYE ->push_back(bDecayVertexMC->error().cyx());
		   B_DecayVtxXZE ->push_back(bDecayVertexMC->error().czx());
		   B_DecayVtxYZE ->push_back(bDecayVertexMC->error().czy());
		  

		   B_J_DecayVtxX ->push_back( psi_vFit_vertex_noMC->position().x() );
	           B_J_DecayVtxY ->push_back( psi_vFit_vertex_noMC->position().y() );
	           B_J_DecayVtxZ ->push_back( psi_vFit_vertex_noMC->position().z() );
		     
	           B_J_DecayVtxXE ->push_back( psi_vFit_vertex_noMC->error().cxx() );
	           B_J_DecayVtxYE ->push_back( psi_vFit_vertex_noMC->error().cyy() );
	           B_J_DecayVtxZE ->push_back( psi_vFit_vertex_noMC->error().czz() );
	           B_J_DecayVtxXYE ->push_back( psi_vFit_vertex_noMC->error().cyx() );
	           B_J_DecayVtxXZE ->push_back( psi_vFit_vertex_noMC->error().czx() );
	           B_J_DecayVtxYZE ->push_back( psi_vFit_vertex_noMC->error().czy() );

 // ********************* muon-trigger-machint**************** 
		   
		   //iMuon1.unpackFilterLabels(iEvent);
		   //iMuon2.unpackFilterLabels(iEvent);

		   // here we will check for muon-trigger-machint  (iMuon1 and iMuon2)

		   //const pat::TriggerObjectStandAloneCollection muHLTMatches1 = (dynamic_cast<const pat::Muon*>(iMuon1))->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDimuon10JpsiBarrel");
		   //const pat::TriggerObjectStandAloneCollection muHLTMatches2 = (dynamic_cast<const pat::Muon*>(iMuon2))->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDimuon16Jpsi");
		   const pat::TriggerObjectStandAloneCollection muHLTMatches1_t1 = iMuon1->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDimuon16Jpsi");
		   const pat::TriggerObjectStandAloneCollection muHLTMatches2_t1 = iMuon2->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDimuon16Jpsi");
		   
		   const pat::TriggerObjectStandAloneCollection muHLTMatches1_t2 = iMuon1->triggerObjectMatchesByFilter("hltJpsiTkVertexFilter");
		   const pat::TriggerObjectStandAloneCollection muHLTMatches2_t2 = iMuon2->triggerObjectMatchesByFilter("hltJpsiTkVertexFilter");

		   const pat::TriggerObjectStandAloneCollection muHLTMatches1_t3 = iMuon1->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDoubleMu43Jpsi");
		   const pat::TriggerObjectStandAloneCollection muHLTMatches2_t3 = iMuon2->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDoubleMu43Jpsi");

		   const pat::TriggerObjectStandAloneCollection muHLTMatches1_t4 = iMuon1->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDimuon20Jpsi");
		   const pat::TriggerObjectStandAloneCollection muHLTMatches2_t4 = iMuon2->triggerObjectMatchesByFilter("hltDisplacedmumuFilterDimuon20Jpsi");
		   
		   int tri_Dim16_tmp = 10, tri_JpsiTk_tmp = 10,  tri_DoubleMu43Jpsi_tmp = 10, tri_Dim20_tmp = 10;

		   if (muHLTMatches1_t1.size() > 0 && muHLTMatches2_t1.size() > 0)
		     {
		       //std::cout<< " it is trigger HLT_Dimuon16_Jpsi " << endl;
		      tri_Dim16_tmp = 1;
		     }
		   else
		     {
		      tri_Dim16_tmp = 0;
		     }

		   if (muHLTMatches1_t2.size() > 0 && muHLTMatches2_t2.size() > 0)
		     {
		       //std::cout<< " it is trigger HLT_DoubleMu4_JpsiTrk_Displaced " << endl;
		       tri_JpsiTk_tmp = 1;
		     }
		   else
		     {
		      tri_JpsiTk_tmp = 0;
		     }

		   if (muHLTMatches1_t3.size() > 0 && muHLTMatches2_t3.size() > 0)
		     {
		       //std::cout<< " it is trigger  HLT_DoubleMu4_3_Jpsi_Displaced" << endl;
		       tri_DoubleMu43Jpsi_tmp = 1;
		     }
		   else
		     {
		      tri_DoubleMu43Jpsi_tmp = 0;
		     }

		   if (muHLTMatches1_t4.size() > 0 && muHLTMatches2_t4.size() > 0)
		     {
		       //std::cout<< " it is trigger HLT_Dimuon20_Jpsi " << endl;
		       tri_Dim20_tmp = 1;
		     }
		   else
		     {
		      tri_Dim20_tmp = 0;
		     }

		   tri_Dim16->push_back( tri_Dim16_tmp );	       
		   tri_JpsiTk->push_back( tri_JpsiTk_tmp );
		   tri_DoubleMu43Jpsi->push_back( tri_DoubleMu43Jpsi_tmp );
		   tri_Dim20->push_back( tri_Dim20_tmp );

            

	   // ************

		   mu1soft->push_back(iMuon1->isSoftMuon(bestVtxIP) );
		   mu2soft->push_back(iMuon2->isSoftMuon(bestVtxIP) );
		   mu1tight->push_back(iMuon1->isTightMuon(bestVtxIP) );
		   mu2tight->push_back(iMuon2->isTightMuon(bestVtxIP) );
		   mu1PF->push_back(iMuon1->isPFMuon());
		   mu2PF->push_back(iMuon2->isPFMuon());
		   mu1loose->push_back(muon::isLooseMuon(*iMuon1));
		   mu2loose->push_back(muon::isLooseMuon(*iMuon2));

		   mumC2->push_back( glbTrackP->normalizedChi2() );
		   //mumAngT->push_back( muon::isGoodMuon(*recoMuonM,muon::TMLastStationAngTight) ); // 
		   mumNHits->push_back( glbTrackP->numberOfValidHits() );
		   mumNPHits->push_back( glbTrackP->hitPattern().numberOfValidPixelHits() );	       
		   mupC2->push_back( glbTrackM->normalizedChi2() );
		   //mupAngT->push_back( muon::isGoodMuon(*recoMuonP,muon::TMLastStationAngTight) );  // 
		   mupNHits->push_back( glbTrackM->numberOfValidHits() );
		   mupNPHits->push_back( glbTrackM->hitPattern().numberOfValidPixelHits() );
                   mumdxy->push_back(glbTrackP->dxy(bestVtxIP.position()) );// el dxy del Muon negatico respetcto del PV con BSc (el de mayor pt)
		   mupdxy->push_back(glbTrackM->dxy(bestVtxIP.position()) );// el dxy del Muon positivo respetcto del PV con BSc (el de mayor pt)
		   mumdz->push_back(glbTrackP->dz(bestVtxIP.position()) );
		   mupdz->push_back(glbTrackM->dz(bestVtxIP.position()) );
		   muon_dca->push_back(dca);
		   //cout<<" closest approach  "<<dca<<endl;

  /////////////////////////////////////////////////////
 
		
		   vector<reco::TransientTrack> vertexTracks;
		    
		   for(View<pat::PackedCandidate>::const_iterator jtrack =thePATTrackHandle->begin();
		       jtrack != thePATTrackHandle->end(); ++jtrack )
		     {
		  /*for (unsigned int j = 0, m = thePATTrackHandle.size(); j<m ; ++j )
		    {
		     const pat::PackedCandidate *jtrack  =  (thePATTrackHandle)[j];*/
		     

		       if(iTrack1==jtrack ) continue;		       
		       if ( IsTheSame(*jtrack,*iMuon1) || IsTheSame(*jtrack,*iMuon2) )continue;
		       if(jtrack->charge()==0) continue;
		       if(fabs(jtrack->pdgId())!=211) continue;

		       if(jtrack->pt()<0.5) continue;
		       //if(!(jtrack->trackHighPurity())) continue;

		       //if( jtrack->fromPV(mu1key)!=3 ) continue;
		       
		       reco::VertexRef pvRef = jtrack->vertexRef();
		       
		       //if(jtrack->pvAssociationQuality()==UsedInFitTight and pvRef.key()==0)
		       //if(jtrack->pvAssociationQuality()!=UsedInFitTight || pvRef.key()!=0)continue;
		       if(jtrack->pvAssociationQuality()!=pat::PackedCandidate::UsedInFitTight || pvRef.key()!=0)continue;
		       //if(jtrack->pvAssociationQuality()!=7)continue;
		       //if(jtrack->pvAssociationQuality()!=7 || pvRef.key()!=0)continue;
		       //if( !(pat::jtrack::UsedInFitTight) || pvRef.key()!=0)continue;
		       //std::cout<<jtrack->pvAssociationQuality()<<endl;

		       reco::TransientTrack tt((*theB).build(jtrack->pseudoTrack()));
		       //reco::TransientTrack tt((*theB).build(jtrack->pseudoTrack(), beamSpot));
		       vertexTracks.push_back(tt);
		       /*trackrefPVpt->push_back(jtrack->pt());
		       trackrefPVdxy->push_back(jtrack->dxy());
		       trackrefPVdxy_e->push_back(jtrack->dxyError());
		       trackrefPVdz->push_back(jtrack->dz());
		       trackrefPVdz_e->push_back(jtrack->dzError());
		       */
			
		       
		     }
		   //std::cout << "tracks vector size:  "<< vertexTracks.size() << std::endl;
		   priRfNTrkDif->push_back(vertexTracks.size());

		   
		   //reco::Vertex refitvertex = bestVtxIP;bestVtx
		   reco::Vertex refitvertex = bestVtx;

		   //reco::Vertex refitvertex;

		   if (  vertexTracks.size()>1  ) 
		     {
		       AdaptiveVertexFitter theFitter;
		       //TransientVertex v = theFitter.vertex(vertexTracks, beamSpot);  // if you want the beam-spot constraint
		       TransientVertex v = theFitter.vertex(vertexTracks);
		       if ( v.isValid() ) {
			 //reco::Vertex recoV = (reco::Vertex)v;		       
			 refitvertex = reco::Vertex(v);	
		       } 
		     }
		   	   
		   //std::cout << "vertex x position:  "<<refitvertex.x() << "    " << bestVtxIP.x()<< std::endl;
		   //std::cout << "vertex y position:  "<<refitvertex.y() << "    " << bestVtxIP.y()<< std::endl;
		   //std::cout << "vertex z position:  "<<refitvertex.z() << "    " << bestVtxIP.z()<< std::endl;
		   

		   priRfVtxX->push_back( refitvertex.x() );
                   priRfVtxY->push_back( refitvertex.y() );
                   priRfVtxZ->push_back( refitvertex.z() );
                   priRfVtxXE->push_back( refitvertex.covariance(0, 0) );
                   priRfVtxYE->push_back( refitvertex.covariance(1, 1) );
                   priRfVtxZE->push_back( refitvertex.covariance(2, 2) );
                   priRfVtxXYE->push_back( refitvertex.covariance(0, 1) );
                   priRfVtxXZE->push_back( refitvertex.covariance(0, 2) );
                   priRfVtxYZE->push_back( refitvertex.covariance(1, 2) );

                   priRfVtxCL->push_back( ChiSquaredProbability((double)(refitvertex.chi2()),(double)(refitvertex.ndof())) );
		   

		   nB++;	       
		   muonParticles.clear();
		   vFitMCParticles.clear();

	    }
	  }
      	}
 
   
  if (nB > 0 ) 
    {

      //std::cout << "filling tree" << endl;
      tree_->Fill();
    }

   nB = 0; nMu = 0;
   //trigger = 0;
  

   B_charge->clear();
   B_mass->clear();    B_px->clear();    B_py->clear();    B_pz->clear(); 
   B_k_px->clear(); B_k_py->clear(); B_k_pz->clear();  B_k_charge1->clear();
   B_k_px_track->clear(); B_k_py_track->clear(); B_k_pz_track->clear();
   B_k_parentId1->clear(); B_k_pId1->clear();

   B_J_mass->clear();  B_J_px->clear();  B_J_py->clear();  B_J_pz->clear();

  
   B_J_pt1->clear();  B_J_px1->clear();  B_J_py1->clear();  B_J_pz1->clear(), B_J_charge1->clear();
   B_J_pt2->clear();  B_J_px2->clear();  B_J_py2->clear();  B_J_pz2->clear(), B_J_charge2->clear();

   B_chi2->clear(); B_J_chi2->clear(); 
   B_Prob->clear(); B_J_Prob->clear();

   B_DecayVtxX->clear();     B_DecayVtxY->clear();     B_DecayVtxZ->clear();
   B_DecayVtxXE->clear();    B_DecayVtxYE->clear();    B_DecayVtxZE->clear();
   B_DecayVtxXYE->clear();   B_DecayVtxXZE->clear();   B_DecayVtxYZE->clear();

   B_J_DecayVtxX->clear();   B_J_DecayVtxY->clear();   B_J_DecayVtxZ->clear();
   B_J_DecayVtxXE->clear();  B_J_DecayVtxYE->clear();  B_J_DecayVtxZE->clear();
   B_J_DecayVtxXYE->clear(); B_J_DecayVtxXZE->clear(); B_J_DecayVtxYZE->clear();

   nVtx = 0;
   priVtxX = 0;     priVtxY = 0;     priVtxZ = 0; 
   priVtxXE = 0;    priVtxYE = 0;    priVtxZE = 0; priVtxCL = 0;
   priVtxXYE = 0;   priVtxXZE = 0;   priVtxYZE = 0; 
   
    

   // vertice primario CON mejor pointin-angle
   pVtxIPX->clear();  pVtxIPY->clear();  pVtxIPZ->clear();
   pVtxIPXE->clear();  pVtxIPYE->clear();  pVtxIPZE->clear();  pVtxIPCL->clear();
   pVtxIPXYE->clear();  pVtxIPXZE->clear();  pVtxIPYZE->clear(); 
  

   PVXBS = 0;     PVYBS = 0;     PVZBS = 0; 
   PVXBSE = 0;    PVYBSE = 0;    PVZBSE = 0; 
   PVXYBSE = 0;   PVXZBSE = 0;   PVYZBSE = 0; 

   
   priRfVtxX->clear(); priRfVtxY->clear(); priRfVtxZ->clear(); priRfVtxXE->clear(); priRfVtxYE->clear();
   priRfVtxZE->clear(); priRfVtxXYE->clear(); priRfVtxXZE->clear(); priRfVtxYZE->clear(); priRfVtxCL->clear(); 
   priRfNTrkDif->clear(); 

   mumC2->clear();
   mumNHits->clear(); mumNPHits->clear();
   mupC2->clear();
   mupNHits->clear(); mupNPHits->clear();
   mumdxy->clear(); mupdxy->clear(); mumdz->clear(); mupdz->clear(); muon_dca->clear();

   tri_Dim16->clear(); tri_Dim20->clear(); tri_JpsiTk->clear(); tri_DoubleMu43Jpsi->clear();


   mu1soft->clear(); mu2soft->clear(); mu1tight->clear(); mu2tight->clear();
   mu1PF->clear(); mu2PF->clear(); mu1loose->clear(); mu2loose->clear(); 
  

  
  
}

/*
int const miniAODmuons::getMuCat(reco::Muon const& muon) const{
  int muCat = 0;
  if (muon.isGlobalMuon()) {
    if (muon.isTrackerMuon()) muCat = 1;
    else muCat = 10;
  }
  else if (muon.isTrackerMuon()) {
    if (muon::isGoodMuon(muon, muon::TrackerMuonArbitrated)) {
      if (muon::isGoodMuon(muon, muon::TMLastStationAngTight)) muCat = 6;
      else if (muon::isGoodMuon(muon, muon::TMOneStationTight)) muCat = 5;
      else if (muon::isGoodMuon(muon, muon::TMOneStationLoose)) muCat = 4;
      else muCat = 3;
    }
    else muCat = 2;
  }
  else if (muon.isStandAloneMuon()) muCat = 7;
  else if (muon.isCaloMuon()) muCat = 8;
  else muCat = 9;
  
  if ( !(muon::isGoodMuon(muon, muon::TMOneStationLoose)) && muon::isGoodMuon(muon, muon::TMOneStationTight) )
    std::cout << "inconsistent muon cat 1" << std::endl;
  if ( !(muon::isGoodMuon(muon, muon::TMOneStationTight)) && muon::isGoodMuon(muon, muon::TMLastStationAngTight) )
    std::cout << "inconsistent muon cat 2" << std::endl;

  return muCat;
}
*/

bool miniAODmuons::IsTheSame(const pat::GenericParticle& tk, const pat::Muon& mu){
  double DeltaEta = fabs(mu.eta()-tk.eta());
  double DeltaP   = fabs(mu.p()-tk.p());
  if (DeltaEta < 0.02 && DeltaP < 0.02) return true;
  return false;
}


// ------------ method called once each job just before starting event loop  ------------


 

void 
miniAODmuons::beginJob()
{

  std::cout << "Beginning analyzer job with value of isMC= " << isMC_ << std::endl;

  edm::Service<TFileService> fs;
  tree_ = fs->make<TTree>("ntuple","Bs->J/psi f0 ntuple");

  tree_->Branch("nB",&nB,"nB/i");
  tree_->Branch("nMu",&nMu,"nMu/i");

  tree_->Branch("B_charge", &B_charge);
  tree_->Branch("B_mass", &B_mass);
  tree_->Branch("B_px", &B_px);
  tree_->Branch("B_py", &B_py);
  tree_->Branch("B_pz", &B_pz);

  tree_->Branch("B_k_charge1", &B_k_charge1);
  tree_->Branch("B_k_px", &B_k_px);
  tree_->Branch("B_k_py", &B_k_py);
  tree_->Branch("B_k_pz", &B_k_pz);
  tree_->Branch("B_k_px_track", &B_k_px_track);
  tree_->Branch("B_k_py_track", &B_k_py_track);
  tree_->Branch("B_k_pz_track", &B_k_pz_track);
  tree_->Branch("B_k_parentId1", &B_k_parentId1);
  tree_->Branch("B_k_pId1", &B_k_pId1);

  tree_->Branch("B_J_mass", &B_J_mass);
  tree_->Branch("B_J_px", &B_J_px);
  tree_->Branch("B_J_py", &B_J_py);
  tree_->Branch("B_J_pz", &B_J_pz);


  tree_->Branch("B_J_pt1", &B_J_pt1);
  tree_->Branch("B_J_px1", &B_J_px1);
  tree_->Branch("B_J_py1", &B_J_py1);
  tree_->Branch("B_J_pz1", &B_J_pz1);
  tree_->Branch("B_J_charge1", &B_J_charge1);


  tree_->Branch("B_J_pt2", &B_J_pt2);
  tree_->Branch("B_J_px2", &B_J_px2);
  tree_->Branch("B_J_py2", &B_J_py2);
  tree_->Branch("B_J_pz2", &B_J_pz2);
  tree_->Branch("B_J_charge2", &B_J_charge2);

  tree_->Branch("B_chi2",    &B_chi2);
  tree_->Branch("B_J_chi2",  &B_J_chi2);

  tree_->Branch("B_Prob",    &B_Prob);
  tree_->Branch("B_J_Prob",  &B_J_Prob);
       
  tree_->Branch("B_DecayVtxX",     &B_DecayVtxX);
  tree_->Branch("B_DecayVtxY",     &B_DecayVtxY);
  tree_->Branch("B_DecayVtxZ",     &B_DecayVtxZ);

  tree_->Branch("B_DecayVtxXE",    &B_DecayVtxXE);
  tree_->Branch("B_DecayVtxYE",    &B_DecayVtxYE);
  tree_->Branch("B_DecayVtxZE",    &B_DecayVtxZE);
  tree_->Branch("B_DecayVtxXYE",    &B_DecayVtxXYE);
  tree_->Branch("B_DecayVtxXZE",    &B_DecayVtxXZE);
  tree_->Branch("B_DecayVtxYZE",    &B_DecayVtxYZE);
 
  tree_->Branch("B_J_DecayVtxX",   &B_J_DecayVtxX);
  tree_->Branch("B_J_DecayVtxY",   &B_J_DecayVtxY);
  tree_->Branch("B_J_DecayVtxZ",   &B_J_DecayVtxZ);

  tree_->Branch("B_J_DecayVtxXE",  &B_J_DecayVtxXE);
  tree_->Branch("B_J_DecayVtxYE",  &B_J_DecayVtxYE);
  tree_->Branch("B_J_DecayVtxZE",  &B_J_DecayVtxZE);
  tree_->Branch("B_J_DecayVtxXYE",  &B_J_DecayVtxXYE);
  tree_->Branch("B_J_DecayVtxXZE",  &B_J_DecayVtxXZE);
  tree_->Branch("B_J_DecayVtxYZE",  &B_J_DecayVtxYZE);

  tree_->Branch("PVXBS",&PVXBS, "PVXBS/D");
  tree_->Branch("PVYBS",&PVYBS, "PVYBS/D");
  tree_->Branch("PVZBS",&PVZBS, "PVZBS/D");
  tree_->Branch("PVXBSE",&PVXBSE, "PVXBSE/D");
  tree_->Branch("PVYBSE",&PVYBSE, "PVYBSE/D");
  tree_->Branch("PVZBSE",&PVZBSE, "PVZBSE/D");
  tree_->Branch("PVXYBSE",&PVXYBSE, "PVXYBSE/D");
  tree_->Branch("PVXZBSE",&PVXZBSE, "PVXZBSE/D");
  tree_->Branch("PVYZBSE",&PVYZBSE, "PVYZBSE/D");

  tree_->Branch("priVtxX",&priVtxX, "priVtxX/f");
  tree_->Branch("priVtxY",&priVtxY, "priVtxY/f");
  tree_->Branch("priVtxZ",&priVtxZ, "priVtxZ/f");
  tree_->Branch("priVtxXE",&priVtxXE, "priVtxXE/f");
  tree_->Branch("priVtxYE",&priVtxYE, "priVtxYE/f");
  tree_->Branch("priVtxZE",&priVtxZE, "priVtxZE/f");
  tree_->Branch("priVtxXYE",&priVtxXYE, "priVtxXYE/f");
  tree_->Branch("priVtxXZE",&priVtxXZE, "priVtxXZE/f");
  tree_->Branch("priVtxYZE",&priVtxYZE, "priVtxYZE/f");
  tree_->Branch("priVtxCL",&priVtxCL, "priVtxCL/f");

 
  tree_->Branch("pVtxIPX",     &pVtxIPX);
  tree_->Branch("pVtxIPY",     &pVtxIPY);
  tree_->Branch("pVtxIPZ",     &pVtxIPZ);
  tree_->Branch("pVtxIPXE",     &pVtxIPXE);
  tree_->Branch("pVtxIPYE",     &pVtxIPYE);
  tree_->Branch("pVtxIPZE",     &pVtxIPZE);
  tree_->Branch("pVtxIPXYE",     &pVtxIPXYE);
  tree_->Branch("pVtxIPXZE",     &pVtxIPXZE);
  tree_->Branch("pVtxIPYZE",     &pVtxIPYZE);
  tree_->Branch("pVtxIPCL",     &pVtxIPCL);

  tree_->Branch("priRfVtxX",&priRfVtxX);
  tree_->Branch("priRfVtxY",&priRfVtxY);
  tree_->Branch("priRfVtxZ",&priRfVtxZ);
  tree_->Branch("priRfVtxXE",&priRfVtxXE);
  tree_->Branch("priRfVtxYE",&priRfVtxYE);
  tree_->Branch("priRfVtxZE",&priRfVtxZE);
  tree_->Branch("priRfVtxXYE",&priRfVtxXYE);
  tree_->Branch("priRfVtxXZE",&priRfVtxXZE);
  tree_->Branch("priRfVtxYZE",&priRfVtxYZE);
  tree_->Branch("priRfVtxCL",&priRfVtxCL);
  tree_->Branch("priRfNTrkDif",&priRfNTrkDif);


  tree_->Branch("nVtx",       &nVtx);
  tree_->Branch("run",        &run,       "run/I");
  tree_->Branch("event",        &event,     "event/I");
  tree_->Branch("lumiblock",&lumiblock,"lumiblock/I");

  //tree_->Branch("trigger",         &trigger,  "trigger/I");
  tree_->Branch("nTrgL",      &nTrgL,    "nTrgL/I");  
  tree_->Branch("triggersL",         &triggersL,  "triggersL[nTrgL]/C");
    
  // *************************

  /*
  tree_->Branch("bctau",&bctau);
  tree_->Branch("bctau2D",&bctau2D);
  tree_->Branch("bctauE",&bctauE);
  tree_->Branch("bctau2DE",&bctau2DE);
  
  tree_->Branch("bctauBS",&bctauBS);
  tree_->Branch("bctauBS2D",&bctauBS2D);
  tree_->Branch("bctauBSE",&bctauBSE);
  tree_->Branch("bctauBS2DE",&bctauBS2DE);
  tree_->Branch("bctauRf",&bctauRf);
  tree_->Branch("bctauRfE",&bctauRfE);
  tree_->Branch("bctau2DRf",&bctau2DRf);
  tree_->Branch("bctau2DRfE",&bctau2DRfE);
  */

  
 
  tree_->Branch("mumC2",&mumC2);  
  tree_->Branch("mumNHits",&mumNHits);
  tree_->Branch("mumNPHits",&mumNPHits);
  tree_->Branch("mupC2",&mupC2);  
  tree_->Branch("mupNHits",&mupNHits);
  tree_->Branch("mupNPHits",&mupNPHits);
  tree_->Branch("mumdxy",&mumdxy);
  tree_->Branch("mupdxy",&mupdxy);
  tree_->Branch("mumdz",&mumdz);
  tree_->Branch("mupdz",&mupdz);
  tree_->Branch("muon_dca",&muon_dca);

  tree_->Branch("tri_Dim16",&tri_Dim16);
  tree_->Branch("tri_Dim20",&tri_Dim20);
  tree_->Branch("tri_JpsiTk",&tri_JpsiTk);
  tree_->Branch("tri_DoubleMu43Jpsi",&tri_DoubleMu43Jpsi);


  tree_->Branch("mu1soft",&mu1soft);
  tree_->Branch("mu2soft",&mu2soft);
  tree_->Branch("mu1tight",&mu1tight);
  tree_->Branch("mu2tight",&mu2tight);
  tree_->Branch("mu1PF",&mu1PF);
  tree_->Branch("mu2PF",&mu2PF);
  tree_->Branch("mu1loose",&mu1loose);
  tree_->Branch("mu2loose",&mu2loose);
  
 

}




// ------------ method called once each job just after ending the event loop  ------------
void miniAODmuons::endJob() {
  tree_->GetDirectory()->cd();
  tree_->Write();
}

//define this as a plug-in
DEFINE_FWK_MODULE(miniAODmuons);
